[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "pyppeteer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "docker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docker",
        "description": "docker",
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pyppeteer;pyppeteer.chromium_downloader.download_chromium(overwrite=True,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyppeteer;pyppeteer.chromium_downloader.download_chromium(overwrite=True.",
        "description": "pyppeteer;pyppeteer.chromium_downloader.download_chromium(overwrite=True.",
        "detail": "pyppeteer;pyppeteer.chromium_downloader.download_chromium(overwrite=True.",
        "documentation": {}
    },
    {
        "label": "asyncio;asyncio.run(async",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio;asyncio.run(async",
        "description": "asyncio;asyncio.run(async",
        "detail": "asyncio;asyncio.run(async",
        "documentation": {}
    },
    {
        "label": "docker,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docker.",
        "description": "docker.",
        "detail": "docker.",
        "documentation": {}
    },
    {
        "label": "asyncio,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio.",
        "description": "asyncio.",
        "detail": "asyncio.",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c1",
        "description": "c1",
        "peekOfCode": "client = docker.from_env()\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]",
        "detail": "c1",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "c1",
        "description": "c1",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"",
        "detail": "c1",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "c1",
        "description": "c1",
        "peekOfCode": "docker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]",
        "detail": "c1",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "c1",
        "description": "c1",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n# Create the main.py file",
        "detail": "c1",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "c1",
        "description": "c1",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n# Create the main.py file\nmain_py = \"\"\"\nimport pyppeteer",
        "detail": "c1",
        "documentation": {}
    },
    {
        "label": "main_py",
        "kind": 5,
        "importPath": "c1",
        "description": "c1",
        "peekOfCode": "main_py = \"\"\"\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True)\n  page = await browser.newPage()\n  await page.goto('https://news.ycombinator.com/')\n  await page.screenshot({'path': '/shared/screenshot.png'})\n  await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\"",
        "detail": "c1",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "c10",
        "description": "c10",
        "peekOfCode": "def create_test(test_name, url):\n    \"\"\"Create a test folder with a Dockerfile and main.py\"\"\"\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    (test_folder / \"Dockerfile\").write_text(DOCKERFILE_CONTENTS)\n    (test_folder / \"main.py\").write_text(f\"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n    b = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')",
        "detail": "c10",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "c10",
        "description": "c10",
        "peekOfCode": "def main():\n    \"\"\"Run the tests\"\"\"\n    client = docker.from_env()\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n    for test_name, url in zip(TEST_NAMES, URLS):\n        create_test(test_name, url)\n        image, _ = client.images.build(path=test_name, tag=f\"{test_name}:latest\")\n        container = client.containers.run(\n            f\"{test_name}:latest\",\n            stdout=True,",
        "detail": "c10",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c10",
        "description": "c10",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# URLs to test",
        "detail": "c10",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c10",
        "description": "c10",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# URLs to test\nURLS = [",
        "detail": "c10",
        "documentation": {}
    },
    {
        "label": "DOCKERFILE_CONTENTS",
        "kind": 5,
        "importPath": "c10",
        "description": "c10",
        "peekOfCode": "DOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# URLs to test\nURLS = [\n    \"https://news.ycombinator.com/\",",
        "detail": "c10",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "c10",
        "description": "c10",
        "peekOfCode": "URLS = [\n    \"https://news.ycombinator.com/\",\n    \"https://example.com\",\n    \"https://www.google.com\",\n    \"https://www.python.org\"\n]\ndef create_test(test_name, url):\n    \"\"\"Create a test folder with a Dockerfile and main.py\"\"\"\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)",
        "detail": "c10",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "c11",
        "description": "c11",
        "peekOfCode": "def create_test(test_name, url):\n    \"\"\"Create a test folder with a Dockerfile and main.py\"\"\"\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    (test_folder / \"Dockerfile\").write_text(DOCKERFILE_CONTENTS)\n    (test_folder / \"main.py\").write_text(f\"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n    b = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')",
        "detail": "c11",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "c11",
        "description": "c11",
        "peekOfCode": "def main():\n    \"\"\"Run the tests\"\"\"\n    client = docker.from_env()\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n    for test_name, url in zip(TEST_NAMES, URLS):\n        create_test(test_name, url)\n        image, _ = client.images.build(path=test_name, tag=f\"{test_name}:latest\")\n        container = client.containers.run(\n            f\"{test_name}:latest\",\n            stdout=True,",
        "detail": "c11",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c11",
        "description": "c11",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# URLs to test",
        "detail": "c11",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c11",
        "description": "c11",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# URLs to test\nURLS = [",
        "detail": "c11",
        "documentation": {}
    },
    {
        "label": "DOCKERFILE_CONTENTS",
        "kind": 5,
        "importPath": "c11",
        "description": "c11",
        "peekOfCode": "DOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# URLs to test\nURLS = [\n    \"https://news.ycombinator.com/\",",
        "detail": "c11",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "c11",
        "description": "c11",
        "peekOfCode": "URLS = [\n    \"https://news.ycombinator.com/\",\n    \"https://example.com\",\n    \"https://www.google.com\",\n    \"https://www.python.org\"\n]\ndef create_test(test_name, url):\n    \"\"\"Create a test folder with a Dockerfile and main.py\"\"\"\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)",
        "detail": "c11",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c2b",
        "description": "c2b",
        "peekOfCode": "client = docker.from_env()\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]",
        "detail": "c2b",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "c2b",
        "description": "c2b",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"",
        "detail": "c2b",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "c2b",
        "description": "c2b",
        "peekOfCode": "docker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]",
        "detail": "c2b",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "c2b",
        "description": "c2b",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n# Create the main.py file",
        "detail": "c2b",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "c2b",
        "description": "c2b",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n# Create the main.py file\nmain_py = \"\"\"\nimport pyppeteer",
        "detail": "c2b",
        "documentation": {}
    },
    {
        "label": "main_py",
        "kind": 5,
        "importPath": "c2b",
        "description": "c2b",
        "peekOfCode": "main_py = \"\"\"\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True)\n  page = await browser.newPage()\n  await page.goto('https://news.ycombinator.com/')\n  await page.screenshot({'path': '/shared/screenshot.png'})\n  await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\"",
        "detail": "c2b",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "client = docker.from_env()\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Create the shared folder\nos.makedirs(shared_folder_name, exist_ok=True)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Create the shared folder\nos.makedirs(shared_folder_name, exist_ok=True)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "docker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n# Create the main.py file",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n# Create the main.py file\nmain_py = \"\"\"\nimport pyppeteer",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "main_py",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "main_py = \"\"\"\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True)\n  page = await browser.newPage()\n  await page.goto('https://news.ycombinator.com/')\n  await page.screenshot({'path': '/shared/screenshot.png'})\n  await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\"",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "images = []\nfor test_name in test_names:\n    image, _ = client.images.build(path=test_name, tag=[f\"{test_name}:latest\"])\n    images.append(image)\n# Run the Docker containers\ncontainers = []\nfor test_name in test_names:\n    container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n    containers.append(container)\n# Wait for the containers to finish",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "c3",
        "description": "c3",
        "peekOfCode": "containers = []\nfor test_name in test_names:\n    container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n    containers.append(container)\n# Wait for the containers to finish\nfor container in containers:\n    while container.status!= 'exited':\n        time.sleep(1)\n        container.reload()\n# Check if screenshots were taken",
        "detail": "c3",
        "documentation": {}
    },
    {
        "label": "create_shared_folder",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def create_shared_folder():\n    \"\"\"Create the shared folder if it doesn't exist\"\"\"\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_dockerfile_and_main_py(test_folder):\n    \"\"\"Create the Dockerfile and main.py files in the test folder\"\"\"\n    dockerfile = \"\"\"\n    FROM python:3.9-slim\n    RUN pip install pyppeteer\n    WORKDIR /app\n    COPY main.py /app/",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "create_dockerfile_and_main_py",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def create_dockerfile_and_main_py(test_folder):\n    \"\"\"Create the Dockerfile and main.py files in the test folder\"\"\"\n    dockerfile = \"\"\"\n    FROM python:3.9-slim\n    RUN pip install pyppeteer\n    WORKDIR /app\n    COPY main.py /app/\n    CMD [\"python\", \"main.py\"]\n    \"\"\"\n    main_py = \"\"\"",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "build_docker_images",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def build_docker_images(test_names):\n    \"\"\"Build the Docker images for each test\"\"\"\n    images = []\n    for test_name in test_names:\n        image, _ = client.images.build(path=test_name, tag=f\"{test_name}:latest\")\n        images.append(image)\n    return images\ndef run_docker_containers(test_names):\n    \"\"\"Run the Docker containers for each test\"\"\"\n    containers = []",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "run_docker_containers",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def run_docker_containers(test_names):\n    \"\"\"Run the Docker containers for each test\"\"\"\n    containers = []\n    for test_name in test_names:\n        container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}})\n        containers.append(container)\n    return containers\ndef wait_for_containers_to_finish(containers):\n    \"\"\"Wait for the containers to finish running\"\"\"\n    for container in containers:",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "wait_for_containers_to_finish",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def wait_for_containers_to_finish(containers):\n    \"\"\"Wait for the containers to finish running\"\"\"\n    for container in containers:\n        while container.status!= 'exited':\n            time.sleep(1)\n            container.reload()\ndef check_screenshots(shared_folder_name):\n    \"\"\"Check if screenshots were taken\"\"\"\n    print(\"Screenshots taken:\")\n    for file in os.listdir(shared_folder_name):",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "check_screenshots",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def check_screenshots(shared_folder_name):\n    \"\"\"Check if screenshots were taken\"\"\"\n    print(\"Screenshots taken:\")\n    for file in os.listdir(shared_folder_name):\n        print(file)\ndef clean_up(containers, images):\n    \"\"\"Clean up the containers and images\"\"\"\n    for container in containers:\n        container.remove()\n    for image in images:",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "clean_up",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def clean_up(containers, images):\n    \"\"\"Clean up the containers and images\"\"\"\n    for container in containers:\n        container.remove()\n    for image in images:\n        client.images.remove(image.id)\ndef main():\n    create_shared_folder()\n    for test_name in TEST_NAMES:\n        test_folder = test_name",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "def main():\n    create_shared_folder()\n    for test_name in TEST_NAMES:\n        test_folder = test_name\n        if os.path.exists(test_folder):\n            for file in os.listdir(test_folder):\n                os.remove(os.path.join(test_folder, file))\n        os.makedirs(test_folder, exist_ok=True)\n        create_dockerfile_and_main_py(test_folder)\n    images = build_docker_images(TEST_NAMES)",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nDOCKER_IMAGE_NAME = \"twap:latest\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create a Docker client\nclient = docker.from_env()\ndef create_shared_folder():\n    \"\"\"Create the shared folder if it doesn't exist\"\"\"\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_dockerfile_and_main_py(test_folder):\n    \"\"\"Create the Dockerfile and main.py files in the test folder\"\"\"",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "DOCKER_IMAGE_NAME",
        "kind": 5,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "DOCKER_IMAGE_NAME = \"twap:latest\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create a Docker client\nclient = docker.from_env()\ndef create_shared_folder():\n    \"\"\"Create the shared folder if it doesn't exist\"\"\"\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_dockerfile_and_main_py(test_folder):\n    \"\"\"Create the Dockerfile and main.py files in the test folder\"\"\"\n    dockerfile = \"\"\"",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create a Docker client\nclient = docker.from_env()\ndef create_shared_folder():\n    \"\"\"Create the shared folder if it doesn't exist\"\"\"\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_dockerfile_and_main_py(test_folder):\n    \"\"\"Create the Dockerfile and main.py files in the test folder\"\"\"\n    dockerfile = \"\"\"\n    FROM python:3.9-slim",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c4",
        "description": "c4",
        "peekOfCode": "client = docker.from_env()\ndef create_shared_folder():\n    \"\"\"Create the shared folder if it doesn't exist\"\"\"\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_dockerfile_and_main_py(test_folder):\n    \"\"\"Create the Dockerfile and main.py files in the test folder\"\"\"\n    dockerfile = \"\"\"\n    FROM python:3.9-slim\n    RUN pip install pyppeteer\n    WORKDIR /app",
        "detail": "c4",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c5",
        "description": "c5",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer",
        "detail": "c5",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c5",
        "description": "c5",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser",
        "detail": "c5",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c5",
        "description": "c5",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]",
        "detail": "c5",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "c5",
        "description": "c5",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# Define the test files\ntest_files = {\n    \"test1_twap.py\": \"\"\"",
        "detail": "c5",
        "documentation": {}
    },
    {
        "label": "test_files",
        "kind": 5,
        "importPath": "c5",
        "description": "c5",
        "peekOfCode": "test_files = {\n    \"test1_twap.py\": \"\"\"\nimport pyppeteer\nasync def main():\n  b = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n  p = await b.newPage()\n  await p.goto('https://news.ycombinator.com/')\n  await p.screenshot({'path': '/shared/screenshot1.png'})\n  await b.close()\npyppeteer.run_until_complete(main())",
        "detail": "c5",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "c5",
        "description": "c5",
        "peekOfCode": "containers = []\nfor test_name in TEST_NAMES:\n    container = client.containers.run(\"twap:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}}, command=f\"python {test_name}.py\")\n    containers.append(container)\n# Wait for the containers to finish\nfor container in containers:\n    while container.status!= 'exited':\n        time.sleep(1)\n        container.reload()\n# Check if screenshots were taken",
        "detail": "c5",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c6",
        "description": "c6",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer",
        "detail": "c6",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c6",
        "description": "c6",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser",
        "detail": "c6",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c6",
        "description": "c6",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]",
        "detail": "c6",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "c6",
        "description": "c6",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# Define the test files\ntest_files = {\n    \"test1_twap.py\": \"\"\"",
        "detail": "c6",
        "documentation": {}
    },
    {
        "label": "test_files",
        "kind": 5,
        "importPath": "c6",
        "description": "c6",
        "peekOfCode": "test_files = {\n    \"test1_twap.py\": \"\"\"\nimport pyppeteer\nasync def main():\n  b = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n  p = await b.newPage()\n  await p.goto('https://news.ycombinator.com/')\n  await p.screenshot({'path': '/shared/screenshot1.png'})\n  await b.close()\npyppeteer.run_until_complete(main())",
        "detail": "c6",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "c6",
        "description": "c6",
        "peekOfCode": "containers = []\nfor test_name in TEST_NAMES:\n    container = client.containers.run(\"twap:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}}, command=f\"python {test_name}.py\")\n    containers.append(container)\n# Wait for the containers to finish\nfor container in containers:\n    while container.status!= 'exited':\n        time.sleep(1)\n        container.reload()\n# Check if screenshots were taken",
        "detail": "c6",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c7",
        "description": "c7",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile contents\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer",
        "detail": "c7",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c7",
        "description": "c7",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile contents\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser",
        "detail": "c7",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c7",
        "description": "c7",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile contents\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]",
        "detail": "c7",
        "documentation": {}
    },
    {
        "label": "dockerfile_contents",
        "kind": 5,
        "importPath": "c7",
        "description": "c7",
        "peekOfCode": "dockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN apt-get update && apt-get install -y chromium-browser\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# Create a temporary Dockerfile\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:\n    tmp_file.write(dockerfile_contents)",
        "detail": "c7",
        "documentation": {}
    },
    {
        "label": "test_files",
        "kind": 5,
        "importPath": "c7",
        "description": "c7",
        "peekOfCode": "test_files = {\n    \"test1_twap.py\": \"\"\"\nimport pyppeteer\nasync def main():\n  b = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n  p = await b.newPage()\n  await p.goto('https://news.ycombinator.com/')\n  await p.screenshot({'path': '/shared/screenshot1.png'})\n  await b.close()\npyppeteer.run_until_complete(main())",
        "detail": "c7",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "c7",
        "description": "c7",
        "peekOfCode": "containers = []\nfor test_name in TEST_NAMES:\n    container = client.containers.run(\"twap:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}}, command=f\"python {test_name}.py\")\n    containers.append(container)\n# Wait for the containers to finish\nfor container in containers:\n    while container.status!= 'exited':\n        time.sleep(1)\n        container.reload()\n# Check if screenshots were taken",
        "detail": "c7",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c8",
        "description": "c8",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile contents\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends",
        "detail": "c8",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c8",
        "description": "c8",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile contents\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app",
        "detail": "c8",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c8",
        "description": "c8",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n# Define the Dockerfile contents\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"",
        "detail": "c8",
        "documentation": {}
    },
    {
        "label": "dockerfile_contents",
        "kind": 5,
        "importPath": "c8",
        "description": "c8",
        "peekOfCode": "dockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# Create a temporary Dockerfile\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:\n    tmp_file.write(dockerfile_contents)\n    dockerfile_path = tmp_file.name",
        "detail": "c8",
        "documentation": {}
    },
    {
        "label": "test_files",
        "kind": 5,
        "importPath": "c8",
        "description": "c8",
        "peekOfCode": "test_files = {\n    \"test1_twap.py\": \"\"\"\nimport pyppeteer\nasync def main():\n    b = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    p = await b.newPage()\n    await p.goto('https://news.ycombinator.com/')\n    await p.screenshot({'path': '/shared/screenshot1.png'})\n    await b.close()\npyppeteer.run_until_complete(main())",
        "detail": "c8",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "c8",
        "description": "c8",
        "peekOfCode": "containers = []\nfor test_name in TEST_NAMES:\n    container = client.containers.run(\"twap:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}}, command=f\"python {test_name}.py\")\n    containers.append(container)\n# Wait for the containers to finish\nfor container in containers:\n    while container.status!= 'exited':\n        time.sleep(1)\n        container.reload()\n# Check if screenshots were taken",
        "detail": "c8",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nclient = docker.from_env()\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nclient = docker.from_env()\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "client = docker.from_env()\nos.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:\n    tmp_file.write(dockerfile_contents)",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "dockerfile_contents",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "dockerfile_contents = \"\"\"\nFROM python:3.9-slim\nRUN apt-get update && apt-get install -y chromium-browser --no-install-recommends\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:\n    tmp_file.write(dockerfile_contents)\n    dockerfile_path = tmp_file.name\ntest_files = {f\"test{i}_twap.py\": f\"\"\"",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "test_files",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "test_files = {f\"test{i}_twap.py\": f\"\"\"\nimport pyppeteer\nasync def main():\n    b = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    p = await b.newPage()\n    await p.goto({'https://news.ycombinator.com/','https://www.google.com/','https://www.bing.com/','https://www.duckduckgo.com/'}[{i-1}])\n    await p.screenshot({{'path': '/shared/screenshot{i}.png'}})\n    await b.close()\npyppeteer.run_until_complete(main())\n\"\"\" for i in range(1, 5)}",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "containers = [client.containers.run(\"twap:latest\", detach=True, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}}, command=f\"python {test_name}.py\") for test_name in TEST_NAMES]\nsuccess = all(container.wait().status_code == 0 for container in containers)\nfor container in containers:\n    container.remove()\nif not success:\n    client.images.remove(image.id)\nclient.close()\nshutil.rmtree(SHARED_FOLDER_NAME)\nfor test_name in test_files:\n    os.remove(test_name)",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "success",
        "kind": 5,
        "importPath": "c9",
        "description": "c9",
        "peekOfCode": "success = all(container.wait().status_code == 0 for container in containers)\nfor container in containers:\n    container.remove()\nif not success:\n    client.images.remove(image.id)\nclient.close()\nshutil.rmtree(SHARED_FOLDER_NAME)\nfor test_name in test_files:\n    os.remove(test_name)",
        "detail": "c9",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "create_test_a_1",
        "description": "create_test_a_1",
        "peekOfCode": "client = docker.from_env()\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]",
        "detail": "create_test_a_1",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "create_test_a_1",
        "description": "create_test_a_1",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"",
        "detail": "create_test_a_1",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "create_test_a_1",
        "description": "create_test_a_1",
        "peekOfCode": "docker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM node:14-alpine\nRUN npm install puppeteer\nCOPY. /app\nWORKDIR /app\nCMD [\"node\", \"index.js\"]",
        "detail": "create_test_a_1",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "create_test_a_1",
        "description": "create_test_a_1",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM node:14-alpine\nRUN npm install puppeteer\nCOPY. /app\nWORKDIR /app\nCMD [\"node\", \"index.js\"]\n\"\"\"\n# Create the index.js file",
        "detail": "create_test_a_1",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "create_test_a_1",
        "description": "create_test_a_1",
        "peekOfCode": "dockerfile = \"\"\"\nFROM node:14-alpine\nRUN npm install puppeteer\nCOPY. /app\nWORKDIR /app\nCMD [\"node\", \"index.js\"]\n\"\"\"\n# Create the index.js file\nindex_js = \"\"\"\nconst puppeteer = require('puppeteer');",
        "detail": "create_test_a_1",
        "documentation": {}
    },
    {
        "label": "index_js",
        "kind": 5,
        "importPath": "create_test_a_1",
        "description": "create_test_a_1",
        "peekOfCode": "index_js = \"\"\"\nconst puppeteer = require('puppeteer');\n(async () => {\n  const browser = await puppeteer.launch({ headless: true });\n  const page = await browser.newPage();\n  await page.goto('https://news.ycombinator.com/');\n  await page.screenshot({ path: '/shared/screenshot.png' });\n  await browser.close();\n})();\n\"\"\"",
        "detail": "create_test_a_1",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "create_tests_a_2",
        "description": "create_tests_a_2",
        "peekOfCode": "client = docker.from_env()\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]",
        "detail": "create_tests_a_2",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "create_tests_a_2",
        "description": "create_tests_a_2",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"",
        "detail": "create_tests_a_2",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "create_tests_a_2",
        "description": "create_tests_a_2",
        "peekOfCode": "docker_image_name = \"twap:latest\"\n# Define the test names\ntest_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nCOPY. /app\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]",
        "detail": "create_tests_a_2",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "create_tests_a_2",
        "description": "create_tests_a_2",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Create the Dockerfile\ndockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nCOPY. /app\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# Create the main.py file",
        "detail": "create_tests_a_2",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "create_tests_a_2",
        "description": "create_tests_a_2",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nCOPY. /app\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\n# Create the main.py file\nmain_py = \"\"\"\nimport pyppeteer",
        "detail": "create_tests_a_2",
        "documentation": {}
    },
    {
        "label": "main_py",
        "kind": 5,
        "importPath": "create_tests_a_2",
        "description": "create_tests_a_2",
        "peekOfCode": "main_py = \"\"\"\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True)\n  page = await browser.newPage()\n  await page.goto('https://news.ycombinator.com/')\n  await page.screenshot({'path': '/shared/screenshot.png'})\n  await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\"",
        "detail": "create_tests_a_2",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "def create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil\n        shutil.rmtree(test_folder)\n    os.makedirs(test_folder)\n    # Create the Dockerfile\n    with open(os.path.join(test_folder, \"Dockerfile\"), \"w\") as f:\n        f.write(f\"\"\"",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twaper:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twaper:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "docker_image_name = \"twaper:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "log_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(f\"Test completed in {elapsed_time:.2f} seconds\")\nbrowser.close()\n\"\"\")",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(f\"Test completed in {elapsed_time:.2f} seconds\")\nbrowser.close()\n\"\"\")\n    # Build the Docker image",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(f\"Test completed in {elapsed_time:.2f} seconds\")\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(f\"Test completed in {elapsed_time:.2f} seconds\")\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests",
        "description": "generate_tests",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(f\"Test completed in {elapsed_time:.2f} seconds\")\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")\n    except docker.errors.BuildError as e:",
        "detail": "generate_tests",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "def create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil\n        shutil.rmtree(test_folder)\n    os.makedirs(test_folder)\n    # Create the Dockerfile\n    with open(os.path.join(test_folder, \"Dockerfile\"), \"w\") as f:\n        f.write(\"\"\"",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "docker_image_name = \"twap:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "log_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/\"\"\" + test_name + \"\"\".png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/\"\"\" + test_name + \"\"\".png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/\"\"\" + test_name + \"\"\".png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(\"Docker image built successfully: \" + docker_image_name)",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests2",
        "description": "generate_tests2",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(\"Docker image built successfully: \" + docker_image_name)\n    except docker.errors.BuildError as e:",
        "detail": "generate_tests2",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "def create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil\n        shutil.rmtree(test_folder)\n    os.makedirs(test_folder)\n    # Create the Dockerfile\n    with open(os.path.join(test_folder, \"Dockerfile\"), \"w\") as f:\n        f.write(\"\"\"",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "docker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "log_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/\"\"\" + test_name + \"\"\".png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/\"\"\" + test_name + \"\"\".png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/\"\"\" + test_name + \"\"\".png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(\"Docker image built successfully: \" + docker_image_name)",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests3",
        "description": "generate_tests3",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(\"Docker image built successfully: \" + docker_image_name)\n    except docker.errors.BuildError as e:",
        "detail": "generate_tests3",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "def create_test(test_name):\n    print(f\"Creating test: {test_name}\")\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        print(f\"Removing existing folder: {test_folder}\")\n        import shutil\n        shutil.rmtree(test_folder)\n    print(f\"Creating folder: {test_folder}\")\n    os.makedirs(test_folder)",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "docker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    print(f\"Creating test: {test_name}\")",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "log_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    print(f\"Creating test: {test_name}\")\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\npage.screenshot({'path': '/app/screenshot.png'})\n# Save screenshot to /shared/screenshot.png (original location)\npage.screenshot({'path': '/shared/screenshot.png'})\nend_time = time.time()\nelapsed_time = end_time - start_time",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\npage.screenshot({'path': '/app/screenshot.png'})\n# Save screenshot to /shared/screenshot.png (original location)\npage.screenshot({'path': '/shared/screenshot.png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\npage.screenshot({'path': '/app/screenshot.png'})\n# Save screenshot to /shared/screenshot.png (original location)\npage.screenshot({'path': '/shared/screenshot.png'})\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    print(f\"Building Docker image for {test_name}\")\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests4",
        "description": "generate_tests4",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    print(f\"Building Docker image for {test_name}\")\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")",
        "detail": "generate_tests4",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "def create_test(test_name):\n    print(f\"Creating test: {test_name}\")\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        print(f\"Removing existing folder: {test_folder}\")\n        import shutil\n        shutil.rmtree(test_folder)\n    print(f\"Creating folder: {test_folder}\")\n    os.makedirs(test_folder)",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "docker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    print(f\"Creating test: {test_name}\")",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "log_file_name = \"time_performance_log.txt\"\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    print(f\"Creating test: {test_name}\")\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\ntry:\n    page.screenshot({'path': '/app/screenshot.png'})\n    print(\"Screenshot saved to /app/screenshot.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\ntry:\n    page.screenshot({'path': '/app/screenshot.png'})\n    print(\"Screenshot saved to /app/screenshot.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\n# Save screenshot to /shared/screenshot.png (original location)",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\ntry:\n    page.screenshot({'path': '/app/screenshot.png'})\n    print(\"Screenshot saved to /app/screenshot.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\n# Save screenshot to /shared/screenshot.png (original location)\ntry:",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    print(f\"Building Docker image for {test_name}\")\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    print(f\"Building Docker image for {test_name}\")\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot2.png\ntry:\n    page.screenshot({'path': '/app/screenshot2.png'})\n    print(\"Screenshot saved to /app/screenshot2.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot2.png\ntry:\n    page.screenshot({'path': '/app/screenshot2.png'})\n    print(\"Screenshot saved to /app/screenshot2.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\nend_time = time.time()",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot2.png\ntry:\n    page.screenshot({'path': '/app/screenshot2.png'})\n    print(\"Screenshot saved to /app/screenshot2.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\nend_time = time.time()\nelapsed_time = end_time - start_time",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    client.containers.get(test_name).restart()\n    time.sleep(5)\n    print(f\"Screenshot saved to different location for {test_name}\")\nprint(\"All tests completed\")",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests5",
        "description": "generate_tests5",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    client.containers.get(test_name).restart()\n    time.sleep(5)\n    print(f\"Screenshot saved to different location for {test_name}\")\nprint(\"All tests completed\")",
        "detail": "generate_tests5",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "def create_test(test_name):\n    print(f\"Creating test: {test_name}\")\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        print(f\"Removing existing folder: {test_folder}\")\n        import shutil\n        shutil.rmtree(test_folder)\n    print(f\"Creating folder: {test_folder}\")\n    os.makedirs(test_folder)",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "docker_image_name = \"twap-ubuntu:latest\"\n# Define the log file name\nlog_file_name = \"time_performance_log.txt\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "log_file_name = \"time_performance_log.txt\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    print(f\"Creating test: {test_name}\")",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    print(f\"Creating shared folder: {shared_folder_name}\")\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    print(f\"Creating test: {test_name}\")\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\ntry:\n    page.screenshot({'path': '/app/screenshot.png'})\n    print(\"Screenshot saved to /app/screenshot.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\ntry:\n    page.screenshot({'path': '/app/screenshot.png'})\n    print(\"Screenshot saved to /app/screenshot.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\n# Save screenshot to /shared/screenshot.png (original location)",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot.png\ntry:\n    page.screenshot({'path': '/app/screenshot.png'})\n    print(\"Screenshot saved to /app/screenshot.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\n# Save screenshot to /shared/screenshot.png (original location)\ntry:",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    print(f\"Building Docker image for {test_name}\")\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    # Build the Docker image\n    print(f\"Building Docker image for {test_name}\")\n    try:\n        image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")\n    except docker.errors.BuildError as e:",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot2.png\ntry:\n    page.screenshot({'path': '/app/screenshot2.png'})\n    print(\"Screenshot saved to /app/screenshot2.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot2.png\ntry:\n    page.screenshot({'path': '/app/screenshot2.png'})\n    print(\"Screenshot saved to /app/screenshot2.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\nend_time = time.time()",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\n# Save screenshot to /app/screenshot2.png\ntry:\n    page.screenshot({'path': '/app/screenshot2.png'})\n    print(\"Screenshot saved to /app/screenshot2.png\")\nexcept Exception as e:\n    print(\"Error saving screenshot:\", str(e))\nend_time = time.time()\nelapsed_time = end_time - start_time",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "end_time = time.time()\nelapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    container.restart()\n    time.sleep(5)\n    print(f\"Screenshot saved to different location for {test_name}\")\nprint(\"All tests completed\")",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "generate_tests6",
        "description": "generate_tests6",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(\"Test completed in {:.2f} seconds\".format(elapsed_time))\nbrowser.close()\n\"\"\")\n    container.restart()\n    time.sleep(5)\n    print(f\"Screenshot saved to different location for {test_name}\")\nprint(\"All tests completed\")",
        "detail": "generate_tests6",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "def create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil\n        shutil.rmtree(test_folder)\n    os.makedirs(test_folder)\n    # Create the Dockerfile\n    with open(os.path.join(test_folder, \"Dockerfile\"), \"w\") as f:\n        f.write(\"\"\"",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "docker_image_name = \"twap-ubuntu:latest\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nbrowser.close()\nprint(\"Test completed in {:.2f} seconds\".format(time.time() - start_time))\n\"\"\")\n    # Build the Docker image\n    image, _ = client.images.build(path=test_folder, tag=docker_image_name)",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nbrowser.close()\nprint(\"Test completed in {:.2f} seconds\".format(time.time() - start_time))\n\"\"\")\n    # Build the Docker image\n    image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n    # Run the Docker container",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests7",
        "description": "generate_tests7",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nbrowser.close()\nprint(\"Test completed in {:.2f} seconds\".format(time.time() - start_time))\n\"\"\")\n    # Build the Docker image\n    image, _ = client.images.build(path=test_folder, tag=docker_image_name)\n    # Run the Docker container\n    container = client.containers.run(docker_image_name, detach=True, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})",
        "detail": "generate_tests7",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "def create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil\n        shutil.rmtree(test_folder)\n    os.makedirs(test_folder)\n    # Create the Dockerfile\n    with open(os.path.join(test_folder, \"Dockerfile\"), \"w\") as f:\n        f.write(\"\"\"",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "test_names",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n# Define the shared folder name\nshared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "shared_folder_name",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "shared_folder_name = \"shared\"\n# Define the Docker image name\ndocker_image_name = \"twap-ubuntu:latest\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "docker_image_name = \"twap-ubuntu:latest\"\n# Create a Docker client\nclient = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "client = docker.from_env()\n# Create the shared folder\nif not os.path.exists(shared_folder_name):\n    os.makedirs(shared_folder_name)\n# Function to create a test\ndef create_test(test_name):\n    # Create the test folder\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        import shutil",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "start_time = time.time()\nbrowser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nbrowser.close()\nprint(\"Test completed in {:.2f} seconds\".format(time.time() - start_time))\n\"\"\")\n    # Build the Docker image\n    try:",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "browser = launch(headless=True, executablePath='/usr/bin/chromium-browser')\npage = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nbrowser.close()\nprint(\"Test completed in {:.2f} seconds\".format(time.time() - start_time))\n\"\"\")\n    # Build the Docker image\n    try:\n        image, build_log = client.images.build(path=test_folder, tag=docker_image_name)",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "generate_tests8",
        "description": "generate_tests8",
        "peekOfCode": "page = browser.newPage()\npage.goto('https://news.ycombinator.com/')\npage.screenshot({'path': '/shared/screenshot.png'})\nbrowser.close()\nprint(\"Test completed in {:.2f} seconds\".format(time.time() - start_time))\n\"\"\")\n    # Build the Docker image\n    try:\n        image, build_log = client.images.build(path=test_folder, tag=docker_image_name)\n        for line in build_log:",
        "detail": "generate_tests8",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "test1_twap",
        "description": "test1_twap",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://news.ycombinator.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test1_twap",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "test1_twap",
        "description": "test1_twap",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://news.ycombinator.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test1_twap",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "test2_twap",
        "description": "test2_twap",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.google.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test2_twap",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "test2_twap",
        "description": "test2_twap",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.google.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test2_twap",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "test3_twap",
        "description": "test3_twap",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.bing.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test3_twap",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "test3_twap",
        "description": "test3_twap",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.bing.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test3_twap",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "test4_twap",
        "description": "test4_twap",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.duckduckgo.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test4_twap",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "test4_twap",
        "description": "test4_twap",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.duckduckgo.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "test4_twap",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "def create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''\n        FROM alpine:latest\n        RUN apk add --no-cache chromium pyppeteer",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "create_dockerfile",
        "kind": 2,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "def create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''\n        FROM alpine:latest\n        RUN apk add --no-cache chromium pyppeteer\n        COPY test1_twap_orch.py /app/\n        WORKDIR /app\n        CMD [\"python\", \"test1_twap_orch.py\"]\n        ''')\ndef create_script(folder_name):",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "create_script",
        "kind": 2,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "def create_script(folder_name):\n    with open(os.path.join(folder_name, 'test1_twap_orch.py'), 'w') as f:\n        f.write('''\n        import time\n        from pyppeteer import launch\n        start_time = time.time()\n        browser = launch(headless=True, executablePath='/usr/bin/chromium')\n        page = browser.newPage()\n        page.goto('https://news.ycombinator.com/')\n        page.screenshot({'path': '/shared/screenshot.png'})",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "build_docker_image",
        "kind": 2,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "def build_docker_image(folder_name, docker_image_name):\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=folder_name, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")\n    except docker.errors.BuildError as e:\n        print(f\"Error building Docker image: {e}\")\ndef run_docker_container(docker_image_name, shared_folder_name):\n    client = docker.from_env()\n    try:",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "run_docker_container",
        "kind": 2,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "def run_docker_container(docker_image_name, shared_folder_name):\n    client = docker.from_env()\n    try:\n        container = client.containers.run(docker_image_name, detach=True, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n        print(f\"Docker container running: {container.short_id}\")\n    except docker.errors.APIError as e:\n        print(f\"Error running Docker container: {e}\")\ndef main():\n    start_time = time.time()\n    create_folder(folder_name)",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "def main():\n    start_time = time.time()\n    create_folder(folder_name)\n    create_folder(shared_folder_name)\n    create_dockerfile(folder_name)\n    create_script(folder_name)\n    build_docker_image(folder_name, docker_image_name)\n    run_docker_container(docker_image_name, shared_folder_name)\n    end_time = time.time()\n    elapsed_time = end_time - start_time",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "folder_name",
        "kind": 5,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "folder_name = 'test1_twap'\nshared_folder_name ='shared'\ndocker_image_name = 'twaper:latest'\nlog_file_name = 'time_performance_log.txt'\ndef create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "docker_image_name = 'twaper:latest'\nlog_file_name = 'time_performance_log.txt'\ndef create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "testXtwap_b",
        "description": "testXtwap_b",
        "peekOfCode": "log_file_name = 'time_performance_log.txt'\ndef create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''\n        FROM alpine:latest",
        "detail": "testXtwap_b",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "def create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''\n        FROM alpine:latest\n        RUN apk add --no-cache chromium pyppeteer",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "create_dockerfile",
        "kind": 2,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "def create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''\n        FROM alpine:latest\n        RUN apk add --no-cache chromium pyppeteer\n        COPY test1_twap_orch.py /app/\n        WORKDIR /app\n        CMD [\"python\", \"test1_twap_orch.py\"]\n        ''')\ndef create_script(folder_name):",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "create_script",
        "kind": 2,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "def create_script(folder_name):\n    with open(os.path.join(folder_name, 'test1_twap_orch.py'), 'w') as f:\n        f.write('''\n        import time\n        from pyppeteer import launch\n        start_time = time.time()\n        browser = launch(headless=True, executablePath='/usr/bin/chromium')\n        page = browser.newPage()\n        page.goto('https://news.ycombinator.com/')\n        page.screenshot({'path': '/shared/screenshot.png'})",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "build_docker_image",
        "kind": 2,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "def build_docker_image(folder_name, docker_image_name):\n    client = docker.from_env()\n    try:\n        image, _ = client.images.build(path=folder_name, tag=docker_image_name)\n        print(f\"Docker image built successfully: {docker_image_name}\")\n    except docker.errors.BuildError as e:\n        print(f\"Error building Docker image: {e}\")\ndef run_docker_container(docker_image_name, shared_folder_name):\n    client = docker.from_env()\n    try:",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "run_docker_container",
        "kind": 2,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "def run_docker_container(docker_image_name, shared_folder_name):\n    client = docker.from_env()\n    try:\n        container = client.containers.run(docker_image_name, detach=True, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n        print(f\"Docker container running: {container.short_id}\")\n    except docker.errors.APIError as e:\n        print(f\"Error running Docker container: {e}\")\ndef main():\n    start_time = time.time()\n    create_folder(folder_name)",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "def main():\n    start_time = time.time()\n    create_folder(folder_name)\n    create_folder(shared_folder_name)\n    create_dockerfile(folder_name)\n    create_script(folder_name)\n    build_docker_image(folder_name, docker_image_name)\n    run_docker_container(docker_image_name, shared_folder_name)\n    end_time = time.time()\n    elapsed_time = end_time - start_time",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "folder_name",
        "kind": 5,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "folder_name = 'test1_twap'\nshared_folder_name ='shared'\ndocker_image_name = 'twaper:latest'\nlog_file_name = 'time_performance_log.txt'\ndef create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "docker_image_name",
        "kind": 5,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "docker_image_name = 'twaper:latest'\nlog_file_name = 'time_performance_log.txt'\ndef create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "testXtwapb",
        "description": "testXtwapb",
        "peekOfCode": "log_file_name = 'time_performance_log.txt'\ndef create_folder(folder_name):\n    if os.path.exists(folder_name):\n        import shutil\n        shutil.rmtree(folder_name)\n    os.makedirs(folder_name)\ndef create_dockerfile(folder_name):\n    with open(os.path.join(folder_name, 'Dockerfile'), 'w') as f:\n        f.write('''\n        FROM alpine:latest",
        "detail": "testXtwapb",
        "documentation": {}
    },
    {
        "label": "create_test_folder",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def create_test_folder(test_name):\n    test_folder = test_name\n    if os.path.exists(test_folder):\n        for file in os.listdir(test_folder):\n            os.remove(os.path.join(test_folder, file))\n    os.makedirs(test_folder, exist_ok=True)\n    return test_folder\ndef create_dockerfile(test_folder):\n    dockerfile = \"\"\"\nFROM python:3.9-slim",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "create_dockerfile",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def create_dockerfile(test_folder):\n    dockerfile = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium python -c \"import pyppeteer; import time; for i in range(3): try: pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867'); break; except Exception as e: print(f'Error downloading Chromium: {e}'); time.sleep(5);\"\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\"\n    dockerfile_path = pathlib.Path(test_folder) / \"Dockerfile\"",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "create_main_py",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def create_main_py(test_folder):\n    main_py = \"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')\n  page = await browser.newPage()\n  await page.goto('https://news.ycombinator.com/')\n  await page.screenshot({'path': '/shared/screenshot.png'})\n  await browser.close()",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "create_twapy_py",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def create_twapy_py(test_folder):\n    twap_py = \"\"\"\nimport os\nimport asyncio\nimport pyppeteer\nasync def main():\n    os.environ[\"PYPPETEER_EXECUTABLE_PATH\"] = \"/usr/local/bin/chromium\"\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')\n    page = await browser.newPage()\n    await page.goto(\"https://example.com\")",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "build_image",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def build_image(client, test_folder, test_name):\n    image, _ = client.images.build(path=test_folder, tag=f\"{test_name}:latest\")\n    return image\ndef run_container(client, test_name, shared_folder_name):\n    container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n    return container\ndef main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"\n    os.makedirs(shared_folder_name, exist_ok=True)",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "run_container",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def run_container(client, test_name, shared_folder_name):\n    container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n    return container\ndef main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"\n    os.makedirs(shared_folder_name, exist_ok=True)\n    test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n    images = []\n    for test_name in test_names:",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "w8_3",
        "description": "w8_3",
        "peekOfCode": "def main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"\n    os.makedirs(shared_folder_name, exist_ok=True)\n    test_names = [f\"test{i}_twap\" for i in range(1, 9)]\n    images = []\n    for test_name in test_names:\n        test_folder = create_test_folder(test_name)\n        create_dockerfile(test_folder)\n        create_main_py(test_folder)",
        "detail": "w8_3",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "w8_4",
        "description": "w8_4",
        "peekOfCode": "def create(test_name):\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    return test_folder\ndef create_dockerfile(test_folder):\n    (test_folder / \"Dockerfile\").write_text(\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium python -c \"import pyppeteer; import time; for i in range(3): try: pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867'); break; except Exception as e: print(f'Error downloading Chromium: {e}'); time.sleep(5);\"\nWORKDIR /app",
        "detail": "w8_4",
        "documentation": {}
    },
    {
        "label": "create_dockerfile",
        "kind": 2,
        "importPath": "w8_4",
        "description": "w8_4",
        "peekOfCode": "def create_dockerfile(test_folder):\n    (test_folder / \"Dockerfile\").write_text(\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium python -c \"import pyppeteer; import time; for i in range(3): try: pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867'); break; except Exception as e: print(f'Error downloading Chromium: {e}'); time.sleep(5);\"\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\")\ndef create_main_py(test_folder, url):",
        "detail": "w8_4",
        "documentation": {}
    },
    {
        "label": "create_main_py",
        "kind": 2,
        "importPath": "w8_4",
        "description": "w8_4",
        "peekOfCode": "def create_main_py(test_folder, url):\n    (test_folder / \"main.py\").write_text(f\"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')\n  page = await browser.newPage()\n  await page.goto('{url}')\n  await page.screenshot({'path': '/shared/screenshot.png'})\n  await browser.close()",
        "detail": "w8_4",
        "documentation": {}
    },
    {
        "label": "build_and_run",
        "kind": 2,
        "importPath": "w8_4",
        "description": "w8_4",
        "peekOfCode": "def build_and_run(client, test_name, url, shared_folder_name):\n    test_folder = create_test(test_name)\n    create_dockerfile(test_folder)\n    create_main_py(test_folder, url)\n    image, _ = client.images.build(path=test_folder, tag=f\"{test_name}:latest\")\n    container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared', 'mode': 'rw'}})\n    return container\ndef main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"",
        "detail": "w8_4",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "w8_4",
        "description": "w8_4",
        "peekOfCode": "def main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"\n    os.makedirs(shared_folder_name, exist_ok=True)\n    test_names = [f\"test{i}_twap\" for i in range(1, 5)]\n    urls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n    containers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n    print(\"Screenshots taken:\")\n    for file in os.listdir(shared_folder_name):\n        print(file)",
        "detail": "w8_4",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "def create(test_name):\n\t\ttest_folder = pathlib.Path(test_name)\n\t\ttest_folder.mkdir(exist_ok=True)\n\t\treturn test_folder\ndef create_dockerfile(test_folder):\n\t\t(test_folder / \"Dockerfile\").write_text(\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium python -c \"import pyppeteer; import time; for i in range(3): try: pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867'); break; except Exception as e: print(f'Error downloading Chromium: {e}'); time.sleep(5);\"\nWORKDIR /app",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "create_dockerfile",
        "kind": 2,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "def create_dockerfile(test_folder):\n\t\t(test_folder / \"Dockerfile\").write_text(\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium python -c \"import pyppeteer; import time; for i in range(3): try: pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867'); break; except Exception as e: print(f'Error downloading Chromium: {e}'); time.sleep(5);\"\nWORKDIR /app\nCOPY main.py /app/\nCMD [\"python\", \"main.py\"]\n\"\"\")\ndef create_main_py(test_folder, url):",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "create_main_py",
        "kind": 2,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "def create_main_py(test_folder, url):\n\t\t(test_folder / \"main.py\").write_text(f\"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')\n  page = await browser.newPage()\n  await page.goto('{url!r}')\n  await page.screenshot({{'path': '/shared/screenshot.png'}})\n  await browser.close()",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "build_and_run",
        "kind": 2,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "def build_and_run(client, test_name, url, shared_folder_name):\n\t\ttest_folder = create(test_name)\n\t\tcreate_dockerfile(test_folder)\n\t\tcreate_main_py(test_folder, url)\n#\t\timage, _ = client.images.build(path=str(test_folder.absolute()), tag=f\"{test_name}:latest\")\n\t\timage, _ = client.images.build(path=test_folder.absolute().as_posix(), tag=f\"{test_name}:latest\")\n#\t\timage, _ = client.images.build(path=test_folder, tag=f\"{test_name}:latest\")\n\t\tcontainer = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared', 'mode': 'rw'}})\n\t\treturn container\ndef main():",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "def main():\n\t\tclient = docker.from_env()\n\t\tshared_folder_name = \"shared\"\n\t\tos.makedirs(shared_folder_name, exist_ok=True)\n\t\ttest_names = [f\"test{i}_twap\" for i in range(1, 5)]\n\t\turls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")\n\t\tfor file in os.listdir(shared_folder_name):\n\t\t\t\tprint(file)",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "download_chromium",
        "kind": 2,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "def download_chromium():\n    try:\n        pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867')\n    except pyppeteer.errors.BrowserError as e:\n        print(f'Error downloading Chromium: {e}')\n        time.sleep(5)\n    except Exception as e:\n        print(f'Unknown error: {e}')\n        time.sleep(5)\nif __name__ == \"__main__\":",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\ttest_folder",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\ttest_folder = pathlib.Path(test_name)\n\t\ttest_folder.mkdir(exist_ok=True)\n\t\treturn test_folder\ndef create_dockerfile(test_folder):\n\t\t(test_folder / \"Dockerfile\").write_text(\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nRUN PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium python -c \"import pyppeteer; import time; for i in range(3): try: pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867'); break; except Exception as e: print(f'Error downloading Chromium: {e}'); time.sleep(5);\"\nWORKDIR /app\nCOPY main.py /app/",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\ttest_folder",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\ttest_folder = create(test_name)\n\t\tcreate_dockerfile(test_folder)\n\t\tcreate_main_py(test_folder, url)\n#\t\timage, _ = client.images.build(path=str(test_folder.absolute()), tag=f\"{test_name}:latest\")\n\t\timage, _ = client.images.build(path=test_folder.absolute().as_posix(), tag=f\"{test_name}:latest\")\n#\t\timage, _ = client.images.build(path=test_folder, tag=f\"{test_name}:latest\")\n\t\tcontainer = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared', 'mode': 'rw'}})\n\t\treturn container\ndef main():\n\t\tclient = docker.from_env()",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\tcontainer",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\tcontainer = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared', 'mode': 'rw'}})\n\t\treturn container\ndef main():\n\t\tclient = docker.from_env()\n\t\tshared_folder_name = \"shared\"\n\t\tos.makedirs(shared_folder_name, exist_ok=True)\n\t\ttest_names = [f\"test{i}_twap\" for i in range(1, 5)]\n\t\turls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\tclient",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\tclient = docker.from_env()\n\t\tshared_folder_name = \"shared\"\n\t\tos.makedirs(shared_folder_name, exist_ok=True)\n\t\ttest_names = [f\"test{i}_twap\" for i in range(1, 5)]\n\t\turls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")\n\t\tfor file in os.listdir(shared_folder_name):\n\t\t\t\tprint(file)\n\t\tfor container in containers:",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\tshared_folder_name",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\tshared_folder_name = \"shared\"\n\t\tos.makedirs(shared_folder_name, exist_ok=True)\n\t\ttest_names = [f\"test{i}_twap\" for i in range(1, 5)]\n\t\turls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")\n\t\tfor file in os.listdir(shared_folder_name):\n\t\t\t\tprint(file)\n\t\tfor container in containers:\n\t\t\t\tcontainer.stop()",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\ttest_names",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\ttest_names = [f\"test{i}_twap\" for i in range(1, 5)]\n\t\turls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")\n\t\tfor file in os.listdir(shared_folder_name):\n\t\t\t\tprint(file)\n\t\tfor container in containers:\n\t\t\t\tcontainer.stop()\n\t\t\t\tcontainer.remove()\nif __name__ == \"__main__\":",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\turls",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\turls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")\n\t\tfor file in os.listdir(shared_folder_name):\n\t\t\t\tprint(file)\n\t\tfor container in containers:\n\t\t\t\tcontainer.stop()\n\t\t\t\tcontainer.remove()\nif __name__ == \"__main__\":\n\t\tmain()",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "\t\tcontainers",
        "kind": 5,
        "importPath": "w8_5",
        "description": "w8_5",
        "peekOfCode": "\t\tcontainers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n\t\tprint(\"Screenshots taken:\")\n\t\tfor file in os.listdir(shared_folder_name):\n\t\t\t\tprint(file)\n\t\tfor container in containers:\n\t\t\t\tcontainer.stop()\n\t\t\t\tcontainer.remove()\nif __name__ == \"__main__\":\n\t\tmain()\n        def create_dockerfile(test_folder):",
        "detail": "w8_5",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def create(test_name):\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    return test_folder\ndef create_dockerfile(test_folder):\n    (test_folder / \"Dockerfile\").write_text(\"\"\"\n    FROM python:3.9-slim\n    RUN pip install pyppeteer\n    ENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\n    COPY download_chromium.py /app/download_chromium.py",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "create_dockerfile",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def create_dockerfile(test_folder):\n    (test_folder / \"Dockerfile\").write_text(\"\"\"\n    FROM python:3.9-slim\n    RUN pip install pyppeteer\n    ENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\n    COPY download_chromium.py /app/download_chromium.py\n    RUN python /app/download_chromium.py\n    WORKDIR /app\n    COPY main.py /app/\n    CMD [\"python\", \"main.py\"]",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "create_download_chromium_py",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def create_download_chromium_py(test_folder):\n    (test_folder / \"download_chromium.py\").write_text(\"\"\"\n#!/usr/bin/env python\nimport pyppeteer\nimport time\ndef download_chromium():\n    try:\n        pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867')\n    except pyppeteer.errors.BrowserError as e:\n        print(f'Error downloading Chromium: {e}')",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "download_chromium",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def download_chromium():\n    try:\n        pyppeteer.chromium_downloader.download_chromium(overwrite=True, chromium_revision='857867')\n    except pyppeteer.errors.BrowserError as e:\n        print(f'Error downloading Chromium: {e}')\n        time.sleep(5)\n    except Exception as e:\n        print(f'Unknown error: {e}')\n        time.sleep(5)\nif __name__ == \"__main__\":",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "create_main_py",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def create_main_py(test_folder, url):\n    (test_folder / \"main.py\").write_text(f\"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n  browser = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')\n  page = await browser.newPage()\n  await page.goto('{url!r}')\n  await page.screenshot({{'path': '/shared/screenshot.png'}})\n  await browser.close()",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "build_and_run",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def build_and_run(client, test_name, url, shared_folder_name):\n    test_folder = create(test_name)\n    create_dockerfile(test_folder)\n    create_download_chromium_py(test_folder)\n    create_main_py(test_folder, url)\n    image, _ = client.images.build(path=test_folder.absolute().as_posix(), tag=f\"{test_name}:latest\")\n    container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), shared_folder_name): {'bind': '/shared','mode': 'rw'}})\n    return container\ndef main():\n    client = docker.from_env()",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "w8_6",
        "description": "w8_6",
        "peekOfCode": "def main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"\n    os.makedirs(shared_folder_name, exist_ok=True)\n    test_names = [f\"test{i}_twap\" for i in range(1, 5)]\n    urls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n    containers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n    print(\"Screenshots taken:\")\n    for file in os.listdir(shared_folder_name):\n        print(file)",
        "detail": "w8_6",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "w8_7",
        "description": "w8_7",
        "peekOfCode": "def create(test_name):\n    (p:=pathlib.Path(test_name)).mkdir(exist_ok=True)\n    return p\ndef build_and_run(client, test_name, url, shared_folder_name):\n    test_folder = create(test_name)\n    (test_folder/\"Dockerfile\").write_text(f\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nCOPY download_chromium.py /app/download_chromium.py",
        "detail": "w8_7",
        "documentation": {}
    },
    {
        "label": "build_and_run",
        "kind": 2,
        "importPath": "w8_7",
        "description": "w8_7",
        "peekOfCode": "def build_and_run(client, test_name, url, shared_folder_name):\n    test_folder = create(test_name)\n    (test_folder/\"Dockerfile\").write_text(f\"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nCOPY download_chromium.py /app/download_chromium.py\nRUN python /app/download_chromium.py\nWORKDIR /app\nCOPY main.py /app/",
        "detail": "w8_7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "w8_7",
        "description": "w8_7",
        "peekOfCode": "def main():\n    client = docker.from_env()\n    shared_folder_name = \"shared\"\n    os.makedirs(shared_folder_name, exist_ok=True)\n    test_names = [f\"test{i}_twap\" for i in range(1, 5)]\n    urls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n    containers = [build_and_run(client, test_name, url, shared_folder_name) for test_name, url in zip(test_names, urls)]\n    for file in os.listdir(shared_folder_name):\n        print(file)\n    for container in containers:",
        "detail": "w8_7",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "w8_8",
        "description": "w8_8",
        "peekOfCode": "def create_test(test_name, url):\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    (test_folder/\"Dockerfile\").write_text(DOCKERFILE_CONTENTS)\n    (test_folder/f\"main.py\").write_text(f\"\"\"\nimport asyncio, pyppeteer\nasync def main():\n    b = await pyppeteer.launch(headless=True, executablePath='/usr/local/bin/chromium')\n    p = await b.newPage()\n    await p.goto('{url!r}')",
        "detail": "w8_8",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "w8_8",
        "description": "w8_8",
        "peekOfCode": "def main():\n    client = docker.from_env()\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n    urls = [\"https://news.ycombinator.com/\", \"https://example.com\", \"https://www.google.com\", \"https://www.python.org\"]\n    for test_name, url in zip(TEST_NAMES, urls):\n        create_test(test_name, url)\n        image, _ = client.images.build(path=test_name, tag=f\"{test_name}:latest\")\n        container = client.containers.run(f\"{test_name}:latest\", stdout=True, detach=False, volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared', 'mode': 'rw'}})\n        container.stop()\n        container.remove()",
        "detail": "w8_8",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "w8_8",
        "description": "w8_8",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\ndef create_test(test_name, url):",
        "detail": "w8_8",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "w8_8",
        "description": "w8_8",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\ndef create_test(test_name, url):\n    test_folder = pathlib.Path(test_name)",
        "detail": "w8_8",
        "documentation": {}
    },
    {
        "label": "DOCKERFILE_CONTENTS",
        "kind": 5,
        "importPath": "w8_8",
        "description": "w8_8",
        "peekOfCode": "DOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\ndef create_test(test_name, url):\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)",
        "detail": "w8_8",
        "documentation": {}
    },
    {
        "label": "create_test",
        "kind": 2,
        "importPath": "xtc1",
        "description": "xtc1",
        "peekOfCode": "def create_test(test_name, url):\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    (test_folder / \"Dockerfile\").write_text(DOCKERFILE_CONTENTS)\n    (test_folder / \"main.py\").write_text(f\"\"\"\nimport asyncio\nimport pyppeteer\nasync def main():\n    b = await pyppeteer.launch(headless=True)\n    p = await b.newPage()",
        "detail": "xtc1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "xtc1",
        "description": "xtc1",
        "peekOfCode": "def main():\n    client = docker.from_env()\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\n    for test_name, url in zip(TEST_NAMES, URLS):\n        create_test(test_name, url)\n        image, _ = client.images.build(path=test_name, tag=f\"{test_name}:latest\")\n        client.containers.run(f\"{test_name}:latest\", volumes={os.path.join(os.getcwd(), SHARED_FOLDER_NAME): {'bind': '/shared','mode': 'rw'}})\nif __name__ == \"__main__\":\n    main()",
        "detail": "xtc1",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "xtc1",
        "description": "xtc1",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nURLS = [",
        "detail": "xtc1",
        "documentation": {}
    },
    {
        "label": "TEST_NAMES",
        "kind": 5,
        "importPath": "xtc1",
        "description": "xtc1",
        "peekOfCode": "TEST_NAMES = [f\"test{i}_twap\" for i in range(1, 5)]\nDOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nURLS = [\n    \"https://news.ycombinator.com/\",",
        "detail": "xtc1",
        "documentation": {}
    },
    {
        "label": "DOCKERFILE_CONTENTS",
        "kind": 5,
        "importPath": "xtc1",
        "description": "xtc1",
        "peekOfCode": "DOCKERFILE_CONTENTS = \"\"\"\nFROM python:3.9-slim\nRUN pip install pyppeteer\nENV PYPPETEER_EXECUTABLE_PATH=/usr/local/bin/chromium\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nURLS = [\n    \"https://news.ycombinator.com/\",\n    \"https://example.com\",",
        "detail": "xtc1",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "xtc1",
        "description": "xtc1",
        "peekOfCode": "URLS = [\n    \"https://news.ycombinator.com/\",\n    \"https://example.com\",\n    \"https://www.google.com\",\n    \"https://www.python.org\"\n]\ndef create_test(test_name, url):\n    test_folder = pathlib.Path(test_name)\n    test_folder.mkdir(exist_ok=True)\n    (test_folder / \"Dockerfile\").write_text(DOCKERFILE_CONTENTS)",
        "detail": "xtc1",
        "documentation": {}
    },
    {
        "label": "create_shared_folder",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def create_shared_folder():\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_test_files():\n    for test_name, test_code in TEST_FILES.items():\n        pathlib.Path(test_name).write_text(test_code)\ndef build_docker_image():\n    dockerfile = \"\"\"FROM python:3.9-slim-buster\nRUN pip install pyppeteer\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\"\"\"",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "create_test_files",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def create_test_files():\n    for test_name, test_code in TEST_FILES.items():\n        pathlib.Path(test_name).write_text(test_code)\ndef build_docker_image():\n    dockerfile = \"\"\"FROM python:3.9-slim-buster\nRUN pip install pyppeteer\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\"\"\"\n    with tempfile.TemporaryDirectory() as tmpdir:\n        with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "build_docker_image",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def build_docker_image():\n    dockerfile = \"\"\"FROM python:3.9-slim-buster\nRUN pip install pyppeteer\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\"\"\"\n    with tempfile.TemporaryDirectory() as tmpdir:\n        with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:\n            f.write(dockerfile)\n        client = docker.from_env()\n        image, _ = client.images.build(path=tmpdir, tag=\"twap:latest\")",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "run_containers",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def run_containers(client, image):\n    containers = []\n    for test_name in TEST_FILES.keys():\n        container = client.containers.run(\"twap:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), \"shared\"): {'bind': '/shared','mode': 'rw'}}, command=f\"python {test_name}\")\n        containers.append(container)\n    return containers\ndef wait_for_containers(containers):\n    for container in containers:\n        while container.status!= 'exited':\n            time.sleep(1)",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "wait_for_containers",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def wait_for_containers(containers):\n    for container in containers:\n        while container.status!= 'exited':\n            time.sleep(1)\n            container.reload()\ndef check_screenshots():\n    print(\"Screenshots taken:\")\n    for file in os.listdir(\"shared\"):\n        print(file)\ndef clean_up(client, image, containers):",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "check_screenshots",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def check_screenshots():\n    print(\"Screenshots taken:\")\n    for file in os.listdir(\"shared\"):\n        print(file)\ndef clean_up(client, image, containers):\n    for container in containers:\n        container.remove()\nif __name__ == \"__main__\":\n    create_shared_folder()\n    create_test_files()",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "clean_up",
        "kind": 2,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "def clean_up(client, image, containers):\n    for container in containers:\n        container.remove()\nif __name__ == \"__main__\":\n    create_shared_folder()\n    create_test_files()\n    client, image = build_docker_image()\n    containers = run_containers(client, image)\n    wait_for_containers(containers)\n    check_screenshots()",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "IMPORTANT_LLM_INSTRUCTION",
        "kind": 5,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "IMPORTANT_LLM_INSTRUCTION = hashlib.sha256(b'IMPORTANT CODE COC: NO CODE COMMENTS, PROTOTYPING: 4 Docker tests (<60MB, <5s startup) FOR SCREENSHOTS OR WEBTASK AUTOMATION; perhaps using Pyppeteer in NON-HEADFUL mode for https://news.ycombinator.com/ https://www.google.com/ https://www.bing.com/ https://www.duckduckgo.com/').hexdigest()[:8]\nprint(IMPORTANT_LLM_INSTRUCTION)\nif IMPORTANT_LLM_INSTRUCTION!= '2a33f760':\n    sys.exit()\nSHARED_FOLDER_NAME = \"shared\"\nTEST_FILES = {\n    \"test1_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://news.ycombinator.com/');await p.screenshot({'path':'/shared/screenshot1.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test2_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.google.com/');await p.screenshot({'path':'/shared/screenshot2.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test3_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.bing.com/');await p.screenshot({'path':'/shared/screenshot3.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test4_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.duckduckgo.com/');await p.screenshot({'path':'/shared/screenshot4.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "SHARED_FOLDER_NAME",
        "kind": 5,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "SHARED_FOLDER_NAME = \"shared\"\nTEST_FILES = {\n    \"test1_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://news.ycombinator.com/');await p.screenshot({'path':'/shared/screenshot1.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test2_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.google.com/');await p.screenshot({'path':'/shared/screenshot2.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test3_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.bing.com/');await p.screenshot({'path':'/shared/screenshot3.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test4_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.duckduckgo.com/');await p.screenshot({'path':'/shared/screenshot4.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n}\ndef create_shared_folder():\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_test_files():",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "TEST_FILES",
        "kind": 5,
        "importPath": "xtc2",
        "description": "xtc2",
        "peekOfCode": "TEST_FILES = {\n    \"test1_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://news.ycombinator.com/');await p.screenshot({'path':'/shared/screenshot1.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test2_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.google.com/');await p.screenshot({'path':'/shared/screenshot2.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test3_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.bing.com/');await p.screenshot({'path':'/shared/screenshot3.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n    \"test4_twap.py\": \"\"\"import pyppeteer;async def main():b=await pyppeteer.launch(headless=True,executablePath='/usr/bin/chromium-browser');p=await b.newPage();await p.goto('https://www.duckduckgo.com/');await p.screenshot({'path':'/shared/screenshot4.png'});await b.close();pyppeteer.run_until_complete(main())\"\"\",\n}\ndef create_shared_folder():\n    os.makedirs(SHARED_FOLDER_NAME, exist_ok=True)\ndef create_test_files():\n    for test_name, test_code in TEST_FILES.items():",
        "detail": "xtc2",
        "documentation": {}
    },
    {
        "label": "IMPORTANT_LLM_INSTRUCTION",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "IMPORTANT_LLM_INSTRUCTION = hashlib.sha256(b'IMPORTANT CODE COC: NO CODE COMMENTS, PROTOTYPING: 4 Docker tests (<60MB, <5s startup) FOR SCREENSHOTS OR WEBTASK AUTOMATION; perhaps using Pyppeteer in NON-HEADFUL mode for https://news.ycombinator.com/ https://www.google.com/ https://www.bing.com/ https://www.duckduckgo.com/').hexdigest()[:8]\nprint(IMPORTANT_LLM_INSTRUCTION)\nif IMPORTANT_LLM_INSTRUCTION != '2a33f760':\n    sys.exit()\nTEST_FILES = {\n    \"test1_twap.py\": \"\"\"\nimport pyppeteer\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "TEST_FILES",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "TEST_FILES = {\n    \"test1_twap.py\": \"\"\"\nimport pyppeteer\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://news.ycombinator.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://news.ycombinator.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\",\n    \"test2_twap.py\": \"\"\"",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.google.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.google.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\",\n    \"test3_twap.py\": \"\"\"",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.bing.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.bing.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\",\n    \"test4_twap.py\": \"\"\"",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--output\", help=\"output file path\")\nargs = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.duckduckgo.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "args = parser.parse_args()\nasync def main():\n    browser = await pyppeteer.launch(headless=True, executablePath='/usr/bin/chromium-browser')\n    page = await browser.newPage()\n    await page.goto('https://www.duckduckgo.com/')\n    await page.screenshot({\"path\": args.output})\n    await browser.close()\npyppeteer.run_until_complete(main())\n\"\"\",\n}",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "dockerfile",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "dockerfile = \"\"\"\nFROM python:3.9-slim-buster\nRUN pip install pyppeteer\nWORKDIR /app\nCMD [\"python\", \"-m\", \"pyppeteer\"]\n\"\"\"\nwith tempfile.TemporaryDirectory() as tmpdir:\n    with open(os.path.join(tmpdir, 'Dockerfile'), 'w') as f:\n        f.write(dockerfile)\n    client = docker.from_env()",
        "detail": "xtc3",
        "documentation": {}
    },
    {
        "label": "containers",
        "kind": 5,
        "importPath": "xtc3",
        "description": "xtc3",
        "peekOfCode": "containers = []\nfor test_name in TEST_FILES.keys():\n    container = client.containers.run(\"twap:latest\", stdout=True, detach=True, volumes={os.path.join(os.getcwd(), \"shared\"): {'bind': '/shared', 'mode': 'rw'}}, command=f\"python {test_name} --output /shared/{test_name}.png\")\n    container.logs(stdout=True)\n    containers.append(container)\nfor container in containers:\n    while container.status != 'exited':\n        time.sleep(1)\n        container.reload()\nprint(\"Screenshots taken:\")",
        "detail": "xtc3",
        "documentation": {}
    }
]